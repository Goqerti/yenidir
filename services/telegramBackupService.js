// services/telegramBackupService.js
const fs = require('fs');
const path = require('path');
const telegramService = require('./telegramService');

const bot = telegramService.bot;
const backupChatId = telegramService.backupChatId; // Yed…ôkl…ôm…ô √º√ß√ºn x√ºsusi ID

// Yed…ôkl…ôn…ôc…ôk fayllarƒ±n siyahƒ±sƒ±
const filesToBackup = [
    { name: 'sifari≈ül…ôr.txt', path: path.join(__dirname, '..', 'sifari≈ül…ôr.txt') },
    { name: 'users.txt', path: path.join(__dirname, '..', 'users.txt') },
    { name: 'x…ôrcl…ôr.txt', path: path.join(__dirname, '..', 'x…ôrcl…ôr.txt') },
    { name: 'inventory.txt', path: path.join(__dirname, '..', 'inventory.txt') },
    { name: 'photo.txt', path: path.join(__dirname, '..', 'photo.txt') },
    { name: 'audit_log.txt', path: path.join(__dirname, '..', 'audit_log.txt') },
    { name: 'permissions.json', path: path.join(__dirname, '..', 'permissions.json') },
];

/**
 * Fayllarƒ± bir-bir Telegram-a g√∂nd…ôr…ôn funksiya.
 */
const sendBackupFiles = () => {
    console.log('Running scheduled task: Sending backup files to Telegram...');

    const now = new Date();
    const caption = `üóìÔ∏è ${now.toLocaleDateString('az-AZ')} ‚è∞ ${now.toLocaleTimeString('az-AZ')} tarixli ehtiyat n√ºsx…ô.`;

    filesToBackup.forEach(fileInfo => {
        if (fs.existsSync(fileInfo.path)) {
            // Faylƒ±n m…ôzmununun bo≈ü olub olmadƒ±ƒüƒ±nƒ± yoxlayƒ±rƒ±q
            const stats = fs.statSync(fileInfo.path);
            if (stats.size > 0) {
                bot.sendDocument(backupChatId, fileInfo.path, { caption: `${fileInfo.name} - ${caption}` })
                    .then(() => {
                        console.log(`‚úÖ ${fileInfo.name} successfully sent to Backup Group.`);
                    })
                    .catch(error => {
                        console.error(`‚ùå Error sending ${fileInfo.name} to Backup Group:`, error.code, error.response?.body);
                    });
            } else {
                console.log(`‚è© Skipping empty file: ${fileInfo.name}`);
            }
        } else {
            console.warn(`‚ö†Ô∏è Backup warning: File not found at ${fileInfo.path}`);
        }
    });
};

/**
 * Planlanmƒ±≈ü g√∂revi ba≈üladan …ôsas funksiya.
 * @param {number} intervalMinutes - G√∂nd…ôrm…ô intervalƒ± (d…ôqiq…ô il…ô).
 */
const startBackupSchedule = (intervalMinutes = 3) => {
    if (!bot || !backupChatId) {
        console.warn('‚ö†Ô∏è Telegram Backup service is not active because bot token or backup chat ID is not configured.');
        return;
    }

    const intervalMilliseconds = intervalMinutes * 60 * 1000;
    
    // Server i≈ü…ô d√º≈üd√ºkd…ô ilk yed…ôkl…ôm…ôni d…ôrhal g√∂nd…ôririk
    sendBackupFiles(); 
    
    // Sonra m√º…ôyy…ôn edilmi≈ü interval il…ô g√∂nd…ôrm…ôy…ô davam edirik
    setInterval(sendBackupFiles, intervalMilliseconds);

    console.log(`‚úÖ Telegram Backup service is active. It will run every ${intervalMinutes} minutes.`);
};

module.exports = { startBackupSchedule };
